hhh=2.75
library(tidyverse)
library(gridExtra)  # or library(patchwork) for an alternative approach
# Define the x variables and their names
xvars = c("Length", "Embeddings", "Cohorts", "exEmbeddings", "Neighbors", "Rhymes")
xnames = c("Length", "Embeddings", "Cohorts", "Log ex-embeddings", "Neighbors", "Rhymes")
# Define the RT columns and their names
rt_columns = c("traceRT", "tiskfbRT", "tisknofbRT", "tiskorRT")
rt_names = c("TRACE RT", "TISKfb RT", "TISK no fb RT", "TISK original RT")
# Initialize an empty list to store plot rows
plot_rows <- list()
# Generate scatterplots for each RT column
for (i in seq_along(rt_columns)) {
rt_plots <- plot.to.list(combined_df, xvars, xnames, rt_columns[i], rt_names[i],
trimy=TRUE, trimx=(i != length(rt_columns)), textsize=18, starting = 0, ending = 101,
jitteramount=0.1)
plot_rows[[i]] <- do.call(grid.arrange, c(rt_plots, ncol=length(xvars)))
# For patchwork: plot_rows[[i]] <- wrap_plots(rt_plots, ncol = length(xvars))
}
# Combine all rows into a final plot
final_plot <- do.call(grid.arrange, c(plot_rows, nrow=length(rt_columns)))
# For patchwork: final_plot <- plot_rows[[1]] / plot_rows[[2]] / plot_rows[[3]] / plot_rows[[4]]
# Display the final plot
print(final_plot)
pdf("compare_model_lex_dims.pdf",width=15,height=15)
print(final_plot)
dev.off()
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -15), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("rr =",acor))
#####################################################################################
plot.to.list <- function(dat, x.vars, x.names, y.vars, y.names, trimy=FALSE, trimx=FALSE,
textsize=18, starting = 0, ending = 101,
jitteramount=0.1, ...) {
someplots <- list()
at = 0
foreach(xvar=x.vars, xname=x.names) %do% {
foreach(yvar=y.vars,yname=y.names) %do% {
acor = sprintf("%.3f",with(dat,cor(get(xvar),get(yvar)) ))
at = at + 1
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -15), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("rr =",acor))
if(at > 1 & trimy == TRUE){
thisplot = thisplot + theme(axis.title.y = element_blank())
}
if(trimx == TRUE){
thisplot = thisplot + theme(axis.title.x = element_blank())
}
someplots[[at]] <- thisplot
}
}
return(someplots)
}
hh=3
ww=20
hhh=2.75
library(tidyverse)
library(gridExtra)  # or library(patchwork) for an alternative approach
# Define the x variables and their names
xvars = c("Length", "Embeddings", "Cohorts", "exEmbeddings", "Neighbors", "Rhymes")
xnames = c("Length", "Embeddings", "Cohorts", "Log ex-embeddings", "Neighbors", "Rhymes")
# Define the RT columns and their names
rt_columns = c("traceRT", "tiskfbRT", "tisknofbRT", "tiskorRT")
rt_names = c("TRACE RT", "TISKfb RT", "TISK no fb RT", "TISK original RT")
# Initialize an empty list to store plot rows
plot_rows <- list()
# Generate scatterplots for each RT column
for (i in seq_along(rt_columns)) {
rt_plots <- plot.to.list(combined_df, xvars, xnames, rt_columns[i], rt_names[i],
trimy=TRUE, trimx=(i != length(rt_columns)), textsize=18, starting = 0, ending = 101,
jitteramount=0.1)
plot_rows[[i]] <- do.call(grid.arrange, c(rt_plots, ncol=length(xvars)))
# For patchwork: plot_rows[[i]] <- wrap_plots(rt_plots, ncol = length(xvars))
}
# Combine all rows into a final plot
final_plot <- do.call(grid.arrange, c(plot_rows, nrow=length(rt_columns)))
# Display the final plot
print(final_plot)
pdf("compare_model_lex_dims.pdf",width=15,height=18)
print(final_plot)
dev.off()
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -18), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("r =",acor))
#####################################################################################
plot.to.list <- function(dat, x.vars, x.names, y.vars, y.names, trimy=FALSE, trimx=FALSE,
textsize=18, starting = 0, ending = 101,
jitteramount=0.1, ...) {
someplots <- list()
at = 0
foreach(xvar=x.vars, xname=x.names) %do% {
foreach(yvar=y.vars,yname=y.names) %do% {
acor = sprintf("%.3f",with(dat,cor(get(xvar),get(yvar)) ))
at = at + 1
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -18), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("r =",acor))
if(at > 1 & trimy == TRUE){
thisplot = thisplot + theme(axis.title.y = element_blank())
}
if(trimx == TRUE){
thisplot = thisplot + theme(axis.title.x = element_blank())
}
someplots[[at]] <- thisplot
}
}
return(someplots)
}
hh=3
ww=20
hhh=2.75
library(tidyverse)
library(gridExtra)  # or library(patchwork) for an alternative approach
# Define the x variables and their names
xvars = c("Length", "Embeddings", "Cohorts", "exEmbeddings", "Neighbors", "Rhymes")
xnames = c("Length", "Embeddings", "Cohorts", "Log ex-embeddings", "Neighbors", "Rhymes")
# Define the RT columns and their names
rt_columns = c("traceRT", "tiskfbRT", "tisknofbRT", "tiskorRT")
rt_names = c("TRACE RT", "TISKfb RT", "TISK no fb RT", "TISK original RT")
# Initialize an empty list to store plot rows
plot_rows <- list()
# Generate scatterplots for each RT column
for (i in seq_along(rt_columns)) {
rt_plots <- plot.to.list(combined_df, xvars, xnames, rt_columns[i], rt_names[i],
trimy=TRUE, trimx=(i != length(rt_columns)), textsize=18, starting = 0, ending = 101,
jitteramount=0.1)
plot_rows[[i]] <- do.call(grid.arrange, c(rt_plots, ncol=length(xvars)))
# For patchwork: plot_rows[[i]] <- wrap_plots(rt_plots, ncol = length(xvars))
}
# Combine all rows into a final plot
final_plot <- do.call(grid.arrange, c(plot_rows, nrow=length(rt_columns)))
# Display the final plot
print(final_plot)
pdf("compare_model_lex_dims.pdf",width=15,height=18)
print(final_plot)
dev.off()
library(foreach)
library(ggplot2)
library(tidyverse)
#setwd("~/Dropbox/MAGNUSON/MODELS/TISK2018/TISKfb_CogSci_2018")
#source("~/Dropbox/MAGNUSON/MODELS/TRACE_FEEDBACK_PRJ_2015/trace_handling_functions.2015.12.01.R")
source("./ANALYSIS/trace_handling_functions.2015.12.01.R")
#source("my.pairscor_both_fits.R")
#source("./ANALYSIS/my.pairscor.linear.R")
source("./ANALYSIS/my.pairscor_both_fits_forPub.R")
# tiskfb.tab<-read.table("fb_result_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# tisknofb.tab<-read.table("nofb_result_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# trace.tab<-read.table("trace_sil_diff05.txt",header=TRUE,na.strings="NA")
# tiskfb.tab<-read.table("Results/Basic_Data/Feedback_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# tisknofb.tab<-read.table("Results/Basic_Data/No_Feedback_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# tisknofborig.tab<-read.table("Results/Basic_Data/Original_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
tiskfb.tab<-read.table("Results/Basic_Data/Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
tisknofb.tab<-read.table("Results/Basic_Data/No_Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
tisknofborig.tab<-read.table("Results/Basic_Data/Original_Reaction_Time.txt", header=TRUE, na.strings = "NA")
trace.tab<-read.table("TRACE_data/trace_slex.txt",header=TRUE,na.strings="NA")
#trace.tab<-read.table("TRACE_data/trace_accrt.txt.lexstat",header=TRUE,na.strings="NA")
names(tiskfb.tab)
head(trace.tab)
trace.tab$logXem = log(trace.tab$exembed + 1)
head(tiskfb.tab)
filter_tisk_data <- function(data) {
filtered_data <- data %>%
select(Target, Time_Dependent) %>%
dplyr::rename(RT = Time_Dependent) %>%
filter(!is.na(RT))
return(filtered_data)
}
tiskfb = filter_tisk_data(tiskfb.tab)
tisknofb = filter_tisk_data(tisknofb.tab)
tiskor = filter_tisk_data(tisknofborig.tab)
head(tiskfb)
head(trace.tab)
#trace = subset(trace.tab, AccType == "CDiff" & ACT == "Activation" & !is.na(RT)) %>% dplyr::rename(Target = TARGET)
#trace = subset(trace.tab, AccType == "CDiff" & ACT == "Activation" & !is.na(RT)) %>% dplyr::rename(Target = TARGET)
trace <- trace.tab %>%
dplyr::select(wrd, len, embed, cohs, logXem, nbs, rhy1, cdiffRt) %>%
dplyr::rename(Target = wrd, Length = len, Embeddings = embed,
Cohorts = cohs, exEmbeddings = logXem, Neighbors = nbs, Rhymes = rhy1, traceRT = cdiffRt) # cdiffRt)
# Replace characters in the Target column of trace
trace <- trace %>%
mutate(Target = str_replace_all(Target, c("x" = "^", "h" = "S")))
head(trace)
library(dplyr)
# Rename the RT columns
tiskfb <- tiskfb %>% dplyr::rename(tiskfbRT = RT)
tisknofb <- tisknofb %>% dplyr::rename(tisknofbRT = RT)
tiskor <- tiskor %>% dplyr::rename(tiskorRT = RT)
#trace <- trace %>% dplyr::rename(traceRT = RT)
# Combine dataframes
combined_df <- trace %>%
left_join(tiskfb, by = "Target") %>%
left_join(tisknofb, by = "Target") %>%
left_join(tiskor, by = "Target")
names(combined_df)
combined_df <- combined_df %>%
filter(!is.na(tiskfbRT) & !is.na(tisknofbRT) & !is.na(tiskorRT) & !is.na(traceRT))
#####################################################################################
plot.to.list <- function(dat, x.vars, x.names, y.vars, y.names, trimy=FALSE, trimx=FALSE,
textsize=18, starting = 0, ending = 101,
jitteramount=0.1, ...) {
someplots <- list()
at = 0
foreach(xvar=x.vars, xname=x.names) %do% {
foreach(yvar=y.vars,yname=y.names) %do% {
acor = sprintf("%.3f",with(dat,cor(get(xvar),get(yvar)) ))
at = at + 1
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -18), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("r =",acor))
if(at > 1 & trimy == TRUE){
thisplot = thisplot + theme(axis.title.y = element_blank())
}
if(trimx == TRUE){
thisplot = thisplot + theme(axis.title.x = element_blank())
}
someplots[[at]] <- thisplot
}
}
return(someplots)
}
#####################################################################################
hh=3
ww=20
hhh=2.75
library(tidyverse)
library(gridExtra)  # or library(patchwork) for an alternative approach
# Define the x variables and their names
xvars = c("Length", "Embeddings", "Cohorts", "exEmbeddings", "Neighbors", "Rhymes")
xnames = c("Length", "Embeddings", "Cohorts", "Log ex-embeddings", "Neighbors", "Rhymes")
# Define the RT columns and their names
rt_columns = c("traceRT", "tiskfbRT", "tisknofbRT", "tiskorRT")
rt_names = c("TRACE RT", "TISKfb RT", "TISK no fb RT", "TISK original RT")
# Initialize an empty list to store plot rows
plot_rows <- list()
# Generate scatterplots for each RT column
for (i in seq_along(rt_columns)) {
rt_plots <- plot.to.list(combined_df, xvars, xnames, rt_columns[i], rt_names[i],
trimy=TRUE, trimx=(i != length(rt_columns)), textsize=18, starting = 0, ending = 101,
jitteramount=0.1)
plot_rows[[i]] <- do.call(grid.arrange, c(rt_plots, ncol=length(xvars)))
# For patchwork: plot_rows[[i]] <- wrap_plots(rt_plots, ncol = length(xvars))
}
# Combine all rows into a final plot
final_plot <- do.call(grid.arrange, c(plot_rows, nrow=length(rt_columns)))
# For patchwork: final_plot <- plot_rows[[1]] / plot_rows[[2]] / plot_rows[[3]] / plot_rows[[4]]
# Display the final plot
print(final_plot)
pdf("compare_model_lex_dims.pdf",width=15,height=18)
print(final_plot)
dev.off()
# Display the final plot
print(final_plot)
pdf("compare_model_lex_dims.pdf",width=15,height=18)
print(final_plot)
dev.off()
library(foreach)
library(ggplot2)
library(tidyverse)
#setwd("~/Dropbox/MAGNUSON/MODELS/TISK2018/TISKfb_CogSci_2018")
#source("~/Dropbox/MAGNUSON/MODELS/TRACE_FEEDBACK_PRJ_2015/trace_handling_functions.2015.12.01.R")
source("./ANALYSIS/trace_handling_functions.2015.12.01.R")
#source("my.pairscor_both_fits.R")
#source("./ANALYSIS/my.pairscor.linear.R")
source("./ANALYSIS/my.pairscor_both_fits_forPub.R")
# tiskfb.tab<-read.table("fb_result_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# tisknofb.tab<-read.table("nofb_result_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# trace.tab<-read.table("trace_sil_diff05.txt",header=TRUE,na.strings="NA")
# tiskfb.tab<-read.table("Results/Basic_Data/Feedback_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# tisknofb.tab<-read.table("Results/Basic_Data/No_Feedback_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
# tisknofborig.tab<-read.table("Results/Basic_Data/Original_Word_Activation_Data.txt_accRt_MRG.txt", header=TRUE, na.strings = "NA")
tiskfb.tab<-read.table("Results/Basic_Data/Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
tisknofb.tab<-read.table("Results/Basic_Data/No_Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
tisknofborig.tab<-read.table("Results/Basic_Data/Original_Reaction_Time.txt", header=TRUE, na.strings = "NA")
trace.tab<-read.table("TRACE_data/trace_slex.txt",header=TRUE,na.strings="NA")
#trace.tab<-read.table("TRACE_data/trace_accrt.txt.lexstat",header=TRUE,na.strings="NA")
names(tiskfb.tab)
head(trace.tab)
trace.tab$logXem = log(trace.tab$exembed + 1)
head(tiskfb.tab)
filter_tisk_data <- function(data) {
filtered_data <- data %>%
select(Target, Time_Dependent) %>%
dplyr::rename(RT = Time_Dependent) %>%
filter(!is.na(RT))
return(filtered_data)
}
tiskfb = filter_tisk_data(tiskfb.tab)
tisknofb = filter_tisk_data(tisknofb.tab)
tiskor = filter_tisk_data(tisknofborig.tab)
head(tiskfb)
head(trace.tab)
#trace = subset(trace.tab, AccType == "CDiff" & ACT == "Activation" & !is.na(RT)) %>% dplyr::rename(Target = TARGET)
#trace = subset(trace.tab, AccType == "CDiff" & ACT == "Activation" & !is.na(RT)) %>% dplyr::rename(Target = TARGET)
trace <- trace.tab %>%
dplyr::select(wrd, len, embed, cohs, logXem, nbs, rhy1, cdiffRt) %>%
dplyr::rename(Target = wrd, Length = len, Embeddings = embed,
Cohorts = cohs, exEmbeddings = logXem, Neighbors = nbs, Rhymes = rhy1, traceRT = cdiffRt) # cdiffRt)
# Replace characters in the Target column of trace
trace <- trace %>%
mutate(Target = str_replace_all(Target, c("x" = "^", "h" = "S")))
head(trace)
library(dplyr)
# Rename the RT columns
tiskfb <- tiskfb %>% dplyr::rename(tiskfbRT = RT)
tisknofb <- tisknofb %>% dplyr::rename(tisknofbRT = RT)
tiskor <- tiskor %>% dplyr::rename(tiskorRT = RT)
#trace <- trace %>% dplyr::rename(traceRT = RT)
# Combine dataframes
combined_df <- trace %>%
left_join(tiskfb, by = "Target") %>%
left_join(tisknofb, by = "Target") %>%
left_join(tiskor, by = "Target")
names(combined_df)
combined_df <- combined_df %>%
filter(!is.na(tiskfbRT) & !is.na(tisknofbRT) & !is.na(tiskorRT) & !is.na(traceRT))
#####################################################################################
plot.to.list <- function(dat, x.vars, x.names, y.vars, y.names, trimy=FALSE, trimx=FALSE,
textsize=18, starting = 0, ending = 101,
jitteramount=0.1, ...) {
someplots <- list()
at = 0
foreach(xvar=x.vars, xname=x.names) %do% {
foreach(yvar=y.vars,yname=y.names) %do% {
acor = sprintf("%.3f",with(dat,cor(get(xvar),get(yvar)) ))
at = at + 1
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -18), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("r =",acor))
if(at > 1 & trimy == TRUE){
thisplot = thisplot + theme(axis.title.y = element_blank())
}
if(trimx == TRUE){
thisplot = thisplot + theme(axis.title.x = element_blank())
}
someplots[[at]] <- thisplot
}
}
return(someplots)
}
#####################################################################################
hh=3
ww=20
hhh=2.75
library(tidyverse)
library(gridExtra)  # or library(patchwork) for an alternative approach
# Define the x variables and their names
xvars = c("Length", "Embeddings", "Cohorts", "exEmbeddings", "Neighbors", "Rhymes")
xnames = c("Length", "Embeddings", "Cohorts", "Log ex-embeddings", "Neighbors", "Rhymes")
# Define the RT columns and their names
rt_columns = c("traceRT", "tiskfbRT", "tisknofbRT", "tiskorRT")
rt_names = c("TRACE RT", "TISKfb RT", "TISK no fb RT", "TISK original RT")
# Initialize an empty list to store plot rows
plot_rows <- list()
# Generate scatterplots for each RT column
for (i in seq_along(rt_columns)) {
rt_plots <- plot.to.list(combined_df, xvars, xnames, rt_columns[i], rt_names[i],
trimy=TRUE, trimx=(i != length(rt_columns)), textsize=18, starting = 0, ending = 101,
jitteramount=0.1)
plot_rows[[i]] <- do.call(grid.arrange, c(rt_plots, ncol=length(xvars)))
# For patchwork: plot_rows[[i]] <- wrap_plots(rt_plots, ncol = length(xvars))
}
# Combine all rows into a final plot
final_plot <- do.call(grid.arrange, c(plot_rows, nrow=length(rt_columns)))
# For patchwork: final_plot <- plot_rows[[1]] / plot_rows[[2]] / plot_rows[[3]] / plot_rows[[4]]
# Display the final plot
print(final_plot)
pdf("compare_model_lex_dims.pdf",width=15,height=18)
print(final_plot)
dev.off()
ggsave("comp_model_lex_dims.pdf", plot=final_plot, width=15, height=18)
ggsave("comp_model_lex_dims.pdf", plot=final_plot, width=18, height=15)
ggsave("comp_model_lex_dims.pdf", plot=final_plot, width=20, height=15)
ggsave("comp_model_lex_dims.pdf", plot=final_plot, width=25, height=15)
