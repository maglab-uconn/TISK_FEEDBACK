tisk1 <- tisk1 %>%
dplyr::mutate(Target = gsub("\\^", "x", Target),  # Replace "^" with "x"
Target = gsub("S", "h", Target)) %>%   # Replace "S" with "h"
# Join with lexdims based on Target
left_join(lexdims, by = "Target")
head(lexdims)
names(lexdims)[1]
names(lexdims)[1] = "Target"
trace
library(foreach)
library(ggplot2)
source("ANALYSIS/trace_handling_functions.2015.12.01.R")
library(dplyr)
#source("my.pairscor_both_fits.R")
source("ANALYSIS/my.pairscor_both_fits_forPub.R")
# tiskfb<-read.table("tisk1.1_slex_stats.txt", header=TRUE, na.strings = "NA")
# tisknofb<-read.table("tisk1.0_slex_stats.txt", header=TRUE, na.strings = "NA")
# trace<-read.table("trace_slex.txt",header=TRUE,na.strings="NA")
tisknofb<-read.table("Results/Basic_Data/No_Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
tiskfb<-read.table("Results/Basic_Data/Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
trace<-read.table("LEXDIMS/trace_slex.utxt",header=TRUE,na.strings="NA")
tisk1 <- read.table("Results/Basic_Data/Original_Reaction_Time.txt",header=TRUE, na.strings="nan")
lexdims <- read.table("LEXDIMS/lex_dims.txt", header=TRUE)
names(lexdims)[1] = "Target"
names(trace)[1] = "Target"
# Replace "^" with "x" and "S" with "h" in the Target column to match TRACE
tisk1 <- tisk1 %>%
dplyr::mutate(Target = gsub("\\^", "x", Target),  # Replace "^" with "x"
Target = gsub("S", "h", Target)) %>%   # Replace "S" with "h"
# Join with lexdims based on Target
left_join(lexdims, by = "Target")
tisknofb <- tisknofb %>%
dplyr::mutate(Target = gsub("\\^", "x", Target),  # Replace "^" with "x"
Target = gsub("S", "h", Target)) %>%   # Replace "S" with "h"
# Join with lexdims based on Target
left_join(lexdims, by = "Target")
tiskfb <- tiskfb %>%
dplyr::mutate(Target = gsub("\\^", "x", Target),  # Replace "^" with "x"
Target = gsub("S", "h", Target)) %>%   # Replace "S" with "h"
# Join with lexdims based on Target
left_join(lexdims, by = "Target")
View(tisk10)
View(tiskfb)
#####################################################################################
plot.to.list <- function(dat, x.vars, x.names, y.vars, y.names, trimy=FALSE, trimx=FALSE,
textsize=18, starting = -20, ending = 80,
jitteramount=0.1, ...) {
someplots <- list()
at = 0
foreach(xvar=x.vars, xname=x.names) %do% {
foreach(yvar=y.vars,yname=y.names) %do% {
acor = sprintf("%.3f",with(dat,cor(get(xvar),get(yvar)) ))
at = at + 1
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -18), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("r =",acor))
if(at > 1 & trimy == TRUE){
thisplot = thisplot + theme(axis.title.y = element_blank())
}
if(trimx == TRUE){
thisplot = thisplot + theme(axis.title.x = element_blank())
}
someplots[[at]] <- thisplot
}
}
return(someplots)
}
#####################################################################################
tisknofb$logCdiffRt = log(tisknofb$cdiffRt)
#####################################################################################
summary(tisknofb)
tisknofb$cdiffRt = tisknofb$Time_Dependent
tisknofb$logCdiffRt = log(tisknofb$cdiffRt)
tisknofb$logEmbed = log10(tisknofb$embed+2)
tisknofb$logExembed = log10(tisknofb$exembed+2)
tisknofb$logNbs = log10((tisknofb$nbs+1.001))
tisknofb$sqrtNbs = sqrt(tisknofb$nbs)
tisknofb$logCohs = log(tisknofb$cohs+1.001)
tisknofb$logRhy1 = log(tisknofb$rhy1+1.001)
rm(list = ls(all.names = TRUE))
library(foreach)
library(ggplot2)
source("ANALYSIS/trace_handling_functions.2015.12.01.R")
library(dplyr)
#source("my.pairscor_both_fits.R")
source("ANALYSIS/my.pairscor_both_fits_forPub.R")
tisknofb<-read.table("Results/Basic_Data/No_Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
tiskfb<-read.table("Results/Basic_Data/Feedback_Reaction_Time.txt", header=TRUE, na.strings = "NA")
trace<-read.table("LEXDIMS/trace_slex.utxt",header=TRUE,na.strings="NA")
tisk1 <- read.table("Results/Basic_Data/Original_Reaction_Time.txt",header=TRUE, na.strings="nan")
lexdims <- read.table("LEXDIMS/lex_dims.txt", header=TRUE)
names(lexdims)[1] = "Target"
names(trace)[1] = "Target"
# Replace "^" with "x" and "S" with "h" in the Target column to match TRACE
tisk1 <- tisk1 %>%
dplyr::mutate(Target = gsub("\\^", "x", Target),  # Replace "^" with "x"
Target = gsub("S", "h", Target)) %>%   # Replace "S" with "h"
# Join with lexdims based on Target
left_join(lexdims, by = "Target")
tisknofb <- tisknofb %>%
dplyr::mutate(Target = gsub("\\^", "x", Target),  # Replace "^" with "x"
Target = gsub("S", "h", Target)) %>%   # Replace "S" with "h"
# Join with lexdims based on Target
left_join(lexdims, by = "Target")
tiskfb <- tiskfb %>%
dplyr::mutate(Target = gsub("\\^", "x", Target),  # Replace "^" with "x"
Target = gsub("S", "h", Target)) %>%   # Replace "S" with "h"
# Join with lexdims based on Target
left_join(lexdims, by = "Target")
names(trace)
names(tiskfb)
names(tisknofb)
#####################################################################################
plot.to.list <- function(dat, x.vars, x.names, y.vars, y.names, trimy=FALSE, trimx=FALSE,
textsize=18, starting = -20, ending = 80,
jitteramount=0.1, ...) {
someplots <- list()
at = 0
foreach(xvar=x.vars, xname=x.names) %do% {
foreach(yvar=y.vars,yname=y.names) %do% {
acor = sprintf("%.3f",with(dat,cor(get(xvar),get(yvar)) ))
at = at + 1
thisplot <-
ggplot(dat,aes_string(x=xvar,y=yvar)) +
#      geom_point(alpha=.5,cex=3,color="grey1") +
geom_jitter(position=position_jitter(jitteramount)) +
#geom_jitter(position = position_jitter(width = 0.1, height = 0.1)) +
#geom_point(alpha=.5,cex=2,position="jitter",color="grey1") +
#geom_abline(intercept=0,slope=1,color="grey") +
#    coord_cartesian(ylim=c(starting, ending), xlim=c(starting,ending)) +
geom_smooth(method='lm', se=TRUE) +
#       coord_cartesian(ylim=c(starting, ending)) +
scale_x_continuous(breaks= pretty_breaks()) +
scale_y_continuous(limits=c(starting,ending), breaks=seq(starting,ending,20)) +
#        theme(plot.title = element_text(hjust = 1, vjust=1)) +
theme(plot.title = element_text(margin = margin(b = -18), hjust = 0.5)) +
theme(panel.background = element_rect(colour="black", fill="white"),
axis.text.x = element_text(size=textsize, face="plain", colour="black"),
axis.text.y = element_text(size=textsize, face="plain", colour="black"),
axis.title.x = element_text(size=textsize, face="bold", colour="black", vjust=-.4),
plot.title = element_text(size=textsize),
axis.title.y = element_text(size=textsize, face="bold", colour="black", vjust=1)) +
# title=element_text(size=textsize))
#plot.title = element_text(size=8) +
xlab(xname) + ylab(yname) +
#stat_smooth(method="lm", se=FALSE) +
#annotate("text", x=Inf, y=Inf, hjust=1.5, vjust=2,label=paste(acor),size=6)
ggtitle(paste("r =",acor))
if(at > 1 & trimy == TRUE){
thisplot = thisplot + theme(axis.title.y = element_blank())
}
if(trimx == TRUE){
thisplot = thisplot + theme(axis.title.x = element_blank())
}
someplots[[at]] <- thisplot
}
}
return(someplots)
}
#####################################################################################
summary(tisknofb)
tisknofb$cdiffRt = tisknofb$Time_Dependent
tisknofb$logCdiffRt = log(tisknofb$cdiffRt)
tisknofb$logEmbed = log10(tisknofb$embed+2)
tisknofb$logExembed = log10(tisknofb$exembed+2)
tisknofb$logNbs = log10((tisknofb$nbs+1.001))
tisknofb$sqrtNbs = sqrt(tisknofb$nbs)
tisknofb$logCohs = log(tisknofb$cohs+1.001)
tisknofb$logRhy1 = log(tisknofb$rhy1+1.001)
tiskfb$cdiffRt = tiskfb$Time_Dependent
tiskfb$logCdiffRt = log(tiskfb$cdiffRt)
tiskfb$logEmbed = log10(tiskfb$embed+2)
tiskfb$logExembed = log10(tiskfb$exembed+2)
tiskfb$logNbs = log10((tiskfb$nbs+1.001))
tiskfb$sqrtNbs = sqrt(tiskfb$nbs)
tiskfb$logCohs = log(tiskfb$cohs+1.001)
tiskfb$logRhy1 = log(tiskfb$rhy1+1.001)
tisk1$cdiffRt = tisk1$Time_Dependent
tisk1$logCdiffRt = log(tisk1$cdiffRt)
tisk1$logEmbed = log10(tisk1$embed+2)
tisk1$logExembed = log10(tisk1$exembed+2)
tisk1$logNbs = log10((tisk1$nbs+1.001))
tisk1$sqrtNbs = sqrt(tisk1$nbs)
tisk1$logCohs = log(tisk1$cohs+1.001)
tisk1$logRhy1 = log(tisk1$rhy1+1.001)
trace$logCdiffRt = log(trace$cdiffRt)
trace$logEmbed = log10(trace$embed+2)
trace$logExembed = log10(trace$exembed+2)
trace$logNbs = log10((trace$nbs+1.001))
trace$sqrtNbs = sqrt(trace$nbs)
trace$logCohs = log(trace$cohs+1.001)
trace$logRhy1 = log(trace$rhy1+1.001)
names(newdat)=c("TRACE","TISKfb", "TISK (no fb, optimized)", "TISK original")
my.pairscor(newdat)
newdat=as.data.frame(trace$cdiffRt)
newdat[,2]=tiskfb$cdiffRt
newdat[,3]=tisknofb$cdiffRt
newdat[,4]=tisk1$cdiffRt
names(newdat)=c("TRACE","TISKfb", "TISK (no fb, optimized)", "TISK original")
my.pairscor(newdat)
rm(list = ls(all.names = TRUE))
# Load necessary libraries
library(dplyr)
library(readr)
library(tidyr)
library(ggplot2)
# Load the data from the tab-delimited file
# Replace 'Results/Retroactive_Effect/Retro.FE.FI.Map.txt' with the path to your file
data <- read_tsv('Results/Retroactive_Effect/Retro.FE.FI.Map.txt')
# Define patterns
p_con_intact <- "/p/\\|pl\\^g"
b_con_intact <- "/b/\\|bl\\^S"
b_incon_intact <- "/b/\\|pl\\^g"
p_incon_intact <- "/p/\\|bl\\^S"
p_con_amb <- "/p/\\|#l\\^g"
b_con_amb <- "/b/\\|#l\\^S"
b_incon_amb <- "/b/\\|#l\\^g"
library(readr)
library(ggplot2)
library(tidyverse)
grid_arrange_shared_legend <- function(..., plotlist=NULL, ncol = length(list(...)) + length(plotlist), nrow = 1, position = c("bottom", "right", "none"))
{
library(ggplot2)
library(gridExtra)
library(grid)
plots <- c(list(...), plotlist)
position <- match.arg(position)
if(position== "bottom")
{
g <- ggplotGrob(plots[[1]] + theme(legend.position = "bottom"))$grobs
}
else
{
g <- ggplotGrob(plots[[1]] + theme(legend.position = "left"))$grobs
}
if("guide-box" %in% sapply(g, function(x) x$name))
{
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
}
else
{
position = "none"
}
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)),
"none" = arrangeGrob(do.call(arrangeGrob, gl)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
work_Dir <- "."  #Insert the TISK dir
if (substr(work_Dir, nchar(work_Dir), nchar(work_Dir)) != "/") { work_Dir <- paste(work_Dir, "/", sep="") }
dir.create(file.path(work_Dir, "Graphs"), showWarnings = FALSE)
dir.create(file.path(paste(work_Dir, "Graphs", sep=""), "Retroactive_Effect"), showWarnings = FALSE)
feedback_Retroactive_Effect_Result <- read_delim(paste(work_Dir, "Results/Retroactive_Effect/Feedback.Retroactive_Effect.txt", sep=""), "\t", escape_double = FALSE, locale = locale(encoding = "UTF-8"), trim_ws = TRUE)
no_Feedback_Retroactive_Effect_Result <- read_delim(paste(work_Dir, "Results/Retroactive_Effect/No_Feedback.Retroactive_Effect.txt", sep=""), "\t", escape_double = FALSE, locale = locale(encoding = "UTF-8"), trim_ws = TRUE)
library(readr)
library(ggplot2)
library(tidyverse)
grid_arrange_shared_legend <- function(..., plotlist=NULL, ncol = length(list(...)) + length(plotlist), nrow = 1, position = c("bottom", "right", "none"))
{
library(ggplot2)
library(gridExtra)
library(grid)
plots <- c(list(...), plotlist)
position <- match.arg(position)
if(position== "bottom")
{
g <- ggplotGrob(plots[[1]] + theme(legend.position = "bottom"))$grobs
}
else
{
g <- ggplotGrob(plots[[1]] + theme(legend.position = "left"))$grobs
}
if("guide-box" %in% sapply(g, function(x) x$name))
{
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
}
else
{
position = "none"
}
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)),
"none" = arrangeGrob(do.call(arrangeGrob, gl)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
work_Dir <- "."  #Insert the TISK dir
if (substr(work_Dir, nchar(work_Dir), nchar(work_Dir)) != "/") { work_Dir <- paste(work_Dir, "/", sep="") }
dir.create(file.path(work_Dir, "Graphs"), showWarnings = FALSE)
dir.create(file.path(paste(work_Dir, "Graphs", sep=""), "Retroactive_Effect"), showWarnings = FALSE)
feedback_Retroactive_Effect_Result <- read_delim(paste(work_Dir, "Results/Retroactive_Effect/Feedback.Retroactive_Effect.txt", sep=""), "\t", escape_double = FALSE, locale = locale(encoding = "UTF-8"), trim_ws = TRUE)
no_Feedback_Retroactive_Effect_Result <- read_delim(paste(work_Dir, "Results/Retroactive_Effect/No_Feedback.Retroactive_Effect.txt", sep=""), "\t", escape_double = FALSE, locale = locale(encoding = "UTF-8"), trim_ws = TRUE)
feedback_Retroactive_Effect_Result <- feedback_Retroactive_Effect_Result[-2:-5]
no_Feedback_Retroactive_Effect_Result <- no_Feedback_Retroactive_Effect_Result[-2:-5]
# melt_Feedback_Retroactive_Effect <- melt(feedback_Retroactive_Effect_Result, id="Cycle")
# melt_No_Feedback_Retroactive_Effect <- melt(no_Feedback_Retroactive_Effect_Result, id="Cycle")
# Using pivot_longer instead of melt
melt_Feedback_Retroactive_Effect <- feedback_Retroactive_Effect_Result %>%
pivot_longer(cols = -Cycle, names_to = "variable", values_to = "value")
melt_No_Feedback_Retroactive_Effect <- no_Feedback_Retroactive_Effect_Result %>%
pivot_longer(cols = -Cycle, names_to = "variable", values_to = "value")
no_Feedback_Graph <- ggplot(data=melt_No_Feedback_Retroactive_Effect, aes(x=Cycle, y=value, shape=variable, colour=variable)) +
geom_line(data=melt_No_Feedback_Retroactive_Effect, aes(linetype=variable)) +
geom_point(data=melt_No_Feedback_Retroactive_Effect[as.numeric(melt_No_Feedback_Retroactive_Effect$Cycle) %% 10 == 0,], aes(shape=variable), size = 3) +
labs(linetype ="Pattern", shape = "Pattern", colour = "Pattern") +
labs(x = "Cycle", y = "Activation of /p/ or /b/", title=paste("No feedback")) +
scale_x_continuous(breaks = (seq(0, 99, 10))) +
ylim(0, 0.4) +
scale_linetype_manual(labels=c("/p/ | #l^g", "/b/ | #l^g", "/p/ | #l^S", "/b/ | #l^S"), values=c("solid", "dashed", "solid", "dashed")) +
scale_shape_manual(labels=c("/p/ | #l^g", "/b/ | #l^g", "/p/ | #l^S", "/b/ | #l^S"), values=c(2,17,5,18)) +
scale_colour_manual(labels=c("/p/ | #l^g", "/b/ | #l^g", "/p/ | #l^S", "/b/ | #l^S"), values=c("red","blue","red","blue")) +
theme_bw() +
theme(text = element_text(size=25),
panel.background = element_blank(),
panel.grid.major = element_blank(),  #remove major-grid labels
panel.grid.minor = element_blank(),  #remove minor-grid labels
plot.background = element_blank(),
legend.key.height=unit(2,"line"))
feedback_Graph <- ggplot(data=melt_Feedback_Retroactive_Effect, aes(x=Cycle, y=value, shape=variable, colour=variable)) +
geom_line(data=melt_Feedback_Retroactive_Effect, aes(linetype=variable)) +
geom_point(data=melt_Feedback_Retroactive_Effect[as.numeric(melt_Feedback_Retroactive_Effect$Cycle) %% 10 == 0,], aes(shape=variable), size = 3) +
labs(linetype ="Pattern", shape = "Pattern", colour = "Pattern") +
labs(x = "Cycle", y = "Activation of /p/ or /b/", title=paste("Feedback")) +
scale_x_continuous(breaks = (seq(0, 99, 10))) +
ylim(0, 0.4) +
scale_linetype_manual(labels=c("/p/ | #l^g", "/b/ | #l^g", "/p/ | #l^S", "/b/ | #l^S"), values=c("solid", "dashed", "solid", "dashed")) +
scale_shape_manual(labels=c("/p/ | #l^g", "/b/ | #l^g", "/p/ | #l^S", "/b/ | #l^S"), values=c(2,17,5,18)) +
scale_colour_manual(labels=c("/p/ | #l^g", "/b/ | #l^g", "/p/ | #l^S", "/b/ | #l^S"), values=c("red","blue","red","blue")) +
theme_bw() +
theme(text = element_text(size=25),
panel.background = element_blank(),
panel.grid.major = element_blank(),  #remove major-grid labels
panel.grid.minor = element_blank(),  #remove minor-grid labels
plot.background = element_blank(),
legend.key.height=unit(2,"line"))
grid_arrange_shared_legend(no_Feedback_Graph, feedback_Graph, ncol = 2, nrow = 1, position="right")
library(readr)
library(ggplot2)
library(tidyverse)
grid_arrange_shared_legend <- function(..., plotlist=NULL, ncol = length(list(...)) + length(plotlist), nrow = 1, position = c("bottom", "right", "none"))
{
library(ggplot2)
library(gridExtra)
library(grid)
plots <- c(list(...), plotlist)
position <- match.arg(position)
if(position== "bottom")
{
g <- ggplotGrob(plots[[1]] + theme(legend.position = "bottom"))$grobs
}
else
{
g <- ggplotGrob(plots[[1]] + theme(legend.position = "left"))$grobs
}
if("guide-box" %in% sapply(g, function(x) x$name))
{
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
}
else
{
position = "none"
}
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)),
"none" = arrangeGrob(do.call(arrangeGrob, gl)))
grid.newpage()
grid.draw(combined)
# return gtable invisibly
invisible(combined)
}
work_Dir <- "."  #Insert the TISK dir
if (substr(work_Dir, nchar(work_Dir), nchar(work_Dir)) != "/") { work_Dir <- paste(work_Dir, "/", sep="") }
dir.create(file.path(work_Dir, "Graphs"), showWarnings = FALSE)
dir.create(file.path(paste(work_Dir, "Graphs", sep=""), "Retroactive_Effect"), showWarnings = FALSE)
feedback_Retroactive_Effect_Result <- read_delim(paste(work_Dir, "Results/Retroactive_Effect/Feedback.Retroactive_Effect.txt", sep=""), "\t", escape_double = FALSE, locale = locale(encoding = "UTF-8"), trim_ws = TRUE)
no_Feedback_Retroactive_Effect_Result <- read_delim(paste(work_Dir, "Results/Retroactive_Effect/No_Feedback.Retroactive_Effect.txt", sep=""), "\t", escape_double = FALSE, locale = locale(encoding = "UTF-8"), trim_ws = TRUE)
# Add 'model' column to feedback_Retroactive_Effect_Result
feedback_Retroactive_Effect_Result <- feedback_Retroactive_Effect_Result %>%
mutate(model = 'Feedback')
# Add 'model' column to no_Feedback_Retroactive_Effect_Result
no_Feedback_Retroactive_Effect_Result <- no_Feedback_Retroactive_Effect_Result %>%
mutate(model = 'No feedback')
combined_Retroactive_Effect_Result <- bind_rows(feedback_Retroactive_Effect_Result, no_Feedback_Retroactive_Effect_Result)
combined_Retroactive_Effect_Result <- combined_Retroactive_Effect_Result %>%
dplyr::rename(
`p:plug` = `/p/|pl^g`,
`b:plug` = `/b/|pl^g`,
`p:blush` = `/p/|bl^S`,
`b:blush` = `/b/|bl^S`,
`p:#lug` = `/p/|#l^g`,
`b:#lug` = `/b/|#l^g`,
`p:#lush` = `/p/|#l^S`,
`b:#lush` = `/b/|#l^S`,
`Model` = `model`
)
# View the first few rows of the modified combined data frame
head(combined_Retroactive_Effect_Result)
long_Retroactive_Effect_Result <- combined_Retroactive_Effect_Result %>%
pivot_longer(
cols = starts_with("p:") | starts_with("b:"),
names_to = c("Phoneme", "Input"),
names_sep = ":",
values_to = "value"
) %>%
mutate(Context = stringr::str_replace(Input, "^(.)", "_")) %>%
mutate(
Ambiguity = if_else(stringr::str_detect(Input, "^[pb]"), "Intact", "Ambiguous"),
Condition = paste0(Phoneme, ':', Ambiguity)
)
# View the first few rows of the transformed data frame
head(long_Retroactive_Effect_Result)
long_Retroactive_Effect_Result$Ambiguity <- factor(long_Retroactive_Effect_Result$Ambiguity,
levels = c("Intact", "Ambiguous"))
# Custom colors for Conditions - adjust as needed
custom_colors <- c("p" = "purple", "b" = "black")
# Assuming Ambiguity has two levels - Intact and Ambiguous for custom line types
custom_linetypes <- c("Intact" = "solid", "Ambiguous" = "dashed")
# If you're plotting points or need specific shapes, adjust this accordingly
# Custom shapes, if applicable
custom_shapes <- c("p" = 16, "b" = 17)  # Example shapes for phonemes
# Adjusting plot code based on provided structure
xplot <- ggplot(long_Retroactive_Effect_Result, aes(x = Cycle, y = value, color = Phoneme, group = Condition)) +
geom_line(aes(linetype = Ambiguity)) +  # Draw lines for each condition, styled by Ambiguity
geom_text(data = long_Retroactive_Effect_Result %>% filter(as.numeric(Cycle) %% 10 == 0),
aes(label = ifelse(grepl("p", Condition), "p", "b")),
size = 6, check_overlap = FALSE,
position = position_jitter(width = 1.5, height = 0.0)) +
facet_grid(Model ~ Context) +  # Facets for Model and Context
scale_colour_manual(values = custom_colors) +
scale_linetype_manual(values = custom_linetypes) +
scale_shape_manual(values = custom_shapes) +  # If using geom_point
labs(x = "Cycle", y = "Activation", color = "Condition", linetype = "Ambiguity") +
theme_bw() +
theme(
text = element_text(size = 30),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank(),
legend.position = c(0.3,0.8),
strip.text.x = element_text(face = "bold"),
strip.text.y = element_text(face = "bold"),
legend.title = element_blank(),
legend.key.width = unit(2, "cm")  # Adjust the width of the legend keys
) +
guides(
color = guide_none(),  # Do not show color in legend
shape = guide_none(),  # Do not show shape in legend (if used)
linetype = guide_legend(override.aes = list(color = "black"), keyheight = unit(3, "lines"))
)
xplot
